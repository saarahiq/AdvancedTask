// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdvancedTaskSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EditShareSkill")]
    public partial class EditShareSkillFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "EditShareSkill.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "EditShareSkill", "As a Mars user, I want to edit a Service Listing record so I can manage my listin" +
                    "gs", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a Service Listing record")]
        [NUnit.Framework.CategoryAttribute("order(1)")]
        [NUnit.Framework.TestCaseAttribute("Business Analyst 01", "Provide Data driven solutions 2.0", "Business", "Legal Consulting", "", "Tag01,Tag02", "One-off service", "Online", "07/08/2024", "08/04/2025", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "Data-Analysis,Programming", "Active", null)]
        public void EditAServiceListingRecord(
                    string title, 
                    string description, 
                    string category, 
                    string subCategory, 
                    string tagsToRemove, 
                    string tagsToAdd, 
                    string serviceType, 
                    string locationType, 
                    string startDate, 
                    string endDate, 
                    string availableDays, 
                    string skillTrade, 
                    string credit, 
                    string skillExchangeTagsToRemove, 
                    string skillExchangeTagsToAdd, 
                    string active, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order(1)"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("SubCategory", subCategory);
            argumentsOfScenario.Add("TagsToRemove", tagsToRemove);
            argumentsOfScenario.Add("TagsToAdd", tagsToAdd);
            argumentsOfScenario.Add("ServiceType", serviceType);
            argumentsOfScenario.Add("LocationType", locationType);
            argumentsOfScenario.Add("StartDate", startDate);
            argumentsOfScenario.Add("EndDate", endDate);
            argumentsOfScenario.Add("AvailableDays", availableDays);
            argumentsOfScenario.Add("SkillTrade", skillTrade);
            argumentsOfScenario.Add("Credit", credit);
            argumentsOfScenario.Add("SkillExchangeTagsToRemove", skillExchangeTagsToRemove);
            argumentsOfScenario.Add("skillExchangeTagsToAdd", skillExchangeTagsToAdd);
            argumentsOfScenario.Add("Active", active);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a Service Listing record", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("I logged in successfully and navigate to the Manage Listings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When(string.Format("I click on the Edit button and enter \'{0}\', \'{1}\', \'{2}\',\'{3}\', \'{4}\', \'{5}\',\'{6}" +
                            "\', \'{7}\', \'{8}\', \'{9}\',\'{10}\', \'{11}\', \'{12}\', \'{13}\', \'{14}\', \'{15}\'", title, description, category, subCategory, tagsToRemove, tagsToAdd, serviceType, locationType, startDate, endDate, availableDays, skillTrade, credit, skillExchangeTagsToRemove, skillExchangeTagsToAdd, active), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("The new Service Listing record should be successfully updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a Service Listing record with invalid title")]
        [NUnit.Framework.CategoryAttribute("order(2)")]
        [NUnit.Framework.TestCaseAttribute("!!Business Analyst 01", "Provide Data driven solutions", "Business", "Legal Consulting", "", "Tag01,Tag02", "One-off service", "Online", "07/08/2024", "08/04/2025", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "Data-Analysis,Programming", "Active", "Please complete the form correctly.", "First character must be an alphabet character or a number.", null)]
        [NUnit.Framework.TestCaseAttribute("Business Analyst 01$$", "Provide Data driven solutions", "Business", "Legal Consulting", "", "Tag01,Tag02", "One-off service", "Online", "07/08/2024", "08/04/2025", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "Data-Analysis,Programming", "Active", "Please complete the form correctly.", "Special characters are not allowed.", null)]
        public void EditAServiceListingRecordWithInvalidTitle(
                    string title, 
                    string description, 
                    string category, 
                    string subCategory, 
                    string tagsToRemove, 
                    string tagsToAdd, 
                    string serviceType, 
                    string locationType, 
                    string startDate, 
                    string endDate, 
                    string availableDays, 
                    string skillTrade, 
                    string credit, 
                    string skillExchangeTagsToRemove, 
                    string skillExchangeTagsToAdd, 
                    string active, 
                    string message, 
                    string fieldErrorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order(2)"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("SubCategory", subCategory);
            argumentsOfScenario.Add("TagsToRemove", tagsToRemove);
            argumentsOfScenario.Add("TagsToAdd", tagsToAdd);
            argumentsOfScenario.Add("ServiceType", serviceType);
            argumentsOfScenario.Add("LocationType", locationType);
            argumentsOfScenario.Add("StartDate", startDate);
            argumentsOfScenario.Add("EndDate", endDate);
            argumentsOfScenario.Add("AvailableDays", availableDays);
            argumentsOfScenario.Add("SkillTrade", skillTrade);
            argumentsOfScenario.Add("Credit", credit);
            argumentsOfScenario.Add("SkillExchangeTagsToRemove", skillExchangeTagsToRemove);
            argumentsOfScenario.Add("skillExchangeTagsToAdd", skillExchangeTagsToAdd);
            argumentsOfScenario.Add("Active", active);
            argumentsOfScenario.Add("Message", message);
            argumentsOfScenario.Add("FieldErrorMessage", fieldErrorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a Service Listing record with invalid title", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
  testRunner.Given("I logged in successfully and navigate to the Manage Listings page to edit the tit" +
                        "le", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
  testRunner.When(string.Format("I click on the Edit button and enter \'{0}\', \'{1}\', \'{2}\',\'{3}\', \'{4}\', \'{5}\',\'{6}" +
                            "\', \'{7}\', \'{8}\', \'{9}\',\'{10}\', \'{11}\', \'{12}\', \'{13}\', \'{14}\', \'{15}\' to see if " +
                            "it doesn\'t save with an invalid title", title, description, category, subCategory, tagsToRemove, tagsToAdd, serviceType, locationType, startDate, endDate, availableDays, skillTrade, credit, skillExchangeTagsToRemove, skillExchangeTagsToAdd, active), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
  testRunner.Then(string.Format("The new Service Listing record should not be updated successfully and I should se" +
                            "e the \'{0}\' and \'{1}\' for title", message, fieldErrorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a Service Listing record with invalid description")]
        [NUnit.Framework.CategoryAttribute("order(3)")]
        [NUnit.Framework.TestCaseAttribute("Business Analyst 01", "$$Test", "Business", "Legal Consulting", "", "Tag01,Tag02", "One-off service", "Online", "07/08/2024", "08/04/2025", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "Data-Analysis,Programming", "Active", "Please complete the form correctly.", "First character must be an alphabet character or a number.", null)]
        [NUnit.Framework.TestCaseAttribute("Business Analyst 01", "Test$$", "Business", "Legal Consulting", "", "Tag01,Tag02", "One-off service", "Online", "07/08/2024", "08/04/2025", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "Data-Analysis,Programming", "Active", "Please complete the form correctly.", "Special characters are not allowed.", null)]
        public void EditAServiceListingRecordWithInvalidDescription(
                    string title, 
                    string description, 
                    string category, 
                    string subCategory, 
                    string tagsToRemove, 
                    string tagsToAdd, 
                    string serviceType, 
                    string locationType, 
                    string startDate, 
                    string endDate, 
                    string availableDays, 
                    string skillTrade, 
                    string credit, 
                    string skillExchangeTagsToRemove, 
                    string skillExchangeTagsToAdd, 
                    string active, 
                    string message, 
                    string fieldErrorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order(3)"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("SubCategory", subCategory);
            argumentsOfScenario.Add("TagsToRemove", tagsToRemove);
            argumentsOfScenario.Add("TagsToAdd", tagsToAdd);
            argumentsOfScenario.Add("ServiceType", serviceType);
            argumentsOfScenario.Add("LocationType", locationType);
            argumentsOfScenario.Add("StartDate", startDate);
            argumentsOfScenario.Add("EndDate", endDate);
            argumentsOfScenario.Add("AvailableDays", availableDays);
            argumentsOfScenario.Add("SkillTrade", skillTrade);
            argumentsOfScenario.Add("Credit", credit);
            argumentsOfScenario.Add("SkillExchangeTagsToRemove", skillExchangeTagsToRemove);
            argumentsOfScenario.Add("skillExchangeTagsToAdd", skillExchangeTagsToAdd);
            argumentsOfScenario.Add("Active", active);
            argumentsOfScenario.Add("Message", message);
            argumentsOfScenario.Add("FieldErrorMessage", fieldErrorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a Service Listing record with invalid description", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
  testRunner.Given("I logged in successfully and navigate to the Manage Listings page to edit the des" +
                        "cription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
  testRunner.When(string.Format("I click on the Edit button and enter \'{0}\', \'{1}\', \'{2}\',\'{3}\', \'{4}\', \'{5}\',\'{6}" +
                            "\', \'{7}\', \'{8}\', \'{9}\',\'{10}\', \'{11}\', \'{12}\', \'{13}\', \'{14}\', \'{15}\' to see if " +
                            "it doesn\'t save with an invalid description", title, description, category, subCategory, tagsToRemove, tagsToAdd, serviceType, locationType, startDate, endDate, availableDays, skillTrade, credit, skillExchangeTagsToRemove, skillExchangeTagsToAdd, active), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
  testRunner.Then(string.Format("The new Service Listing record should not be updated successfully and I should se" +
                            "e the \'{0}\' and \'{1}\' for description", message, fieldErrorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a Service Listing record with invalid tags")]
        [NUnit.Framework.CategoryAttribute("order(4)")]
        [NUnit.Framework.TestCaseAttribute("Business Analyst 01", "Provide Data driven solutions", "Business", "Legal Consulting", "Tag01,Tag02", "", "One-off service", "Online", "07/08/2024", "08/04/2025", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "", "Active", "Please complete the form correctly.", "Please enter a tag", null)]
        public void EditAServiceListingRecordWithInvalidTags(
                    string title, 
                    string description, 
                    string category, 
                    string subCategory, 
                    string tagsToRemove, 
                    string tagsToAdd, 
                    string serviceType, 
                    string locationType, 
                    string startDate, 
                    string endDate, 
                    string availableDays, 
                    string skillTrade, 
                    string credit, 
                    string skillExchangeTagsToRemove, 
                    string skillExchangeTagsToAdd, 
                    string active, 
                    string message, 
                    string fieldErrorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order(4)"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("SubCategory", subCategory);
            argumentsOfScenario.Add("TagsToRemove", tagsToRemove);
            argumentsOfScenario.Add("TagsToAdd", tagsToAdd);
            argumentsOfScenario.Add("ServiceType", serviceType);
            argumentsOfScenario.Add("LocationType", locationType);
            argumentsOfScenario.Add("StartDate", startDate);
            argumentsOfScenario.Add("EndDate", endDate);
            argumentsOfScenario.Add("AvailableDays", availableDays);
            argumentsOfScenario.Add("SkillTrade", skillTrade);
            argumentsOfScenario.Add("Credit", credit);
            argumentsOfScenario.Add("SkillExchangeTagsToRemove", skillExchangeTagsToRemove);
            argumentsOfScenario.Add("skillExchangeTagsToAdd", skillExchangeTagsToAdd);
            argumentsOfScenario.Add("Active", active);
            argumentsOfScenario.Add("Message", message);
            argumentsOfScenario.Add("FieldErrorMessage", fieldErrorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a Service Listing record with invalid tags", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
  testRunner.Given("I logged in successfully and navigate to the Manage Listings page to edit the tag" +
                        "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
  testRunner.When(string.Format("I click on the Edit button and enter \'{0}\', \'{1}\', \'{2}\',\'{3}\', \'{4}\', \'{5}\',\'{6}" +
                            "\', \'{7}\', \'{8}\', \'{9}\',\'{10}\', \'{11}\', \'{12}\', \'{13}\', \'{14}\', \'{15}\' to see if " +
                            "it doesn\'t save with an invalid tags", title, description, category, subCategory, tagsToRemove, tagsToAdd, serviceType, locationType, startDate, endDate, availableDays, skillTrade, credit, skillExchangeTagsToRemove, skillExchangeTagsToAdd, active), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
  testRunner.Then(string.Format("The new Service Listing record should not be updated successfully and I should se" +
                            "e the \'{0}\' and \'{1}\' for tags", message, fieldErrorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a Service Listing record with invalid start and end date")]
        [NUnit.Framework.CategoryAttribute("order(5)")]
        [NUnit.Framework.TestCaseAttribute("Business Analyst 01", "Provide Data driven solutions", "Business", "Legal Consulting", "", "Tag01,Tag02", "One-off service", "Online", "07/08/2023", "", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "Data-Analysis,Programming", "Active", "Please complete the form correctly.", "Start Date cannot be set to a day in the past", null)]
        [NUnit.Framework.TestCaseAttribute("Business Analyst 01", "Provide Data driven solutions", "Business", "Legal Consulting", "", "Tag01,Tag02", "One-off service", "Online", "07/08/2024", "02/01/2023", "Mon,0900AM,1000PM;Tue,1230PM,0200PM", "Skill-exchange", "", "", "Data-Analysis,Programming", "Active", "Please complete the form correctly.", "Start Date shouldn\'t be greater than End Date", null)]
        public void EditAServiceListingRecordWithInvalidStartAndEndDate(
                    string title, 
                    string description, 
                    string category, 
                    string subCategory, 
                    string tagsToRemove, 
                    string tagsToAdd, 
                    string serviceType, 
                    string locationType, 
                    string startDate, 
                    string endDate, 
                    string availableDays, 
                    string skillTrade, 
                    string credit, 
                    string skillExchangeTagsToRemove, 
                    string skillExchangeTagsToAdd, 
                    string active, 
                    string message, 
                    string fieldErrorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order(5)"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("SubCategory", subCategory);
            argumentsOfScenario.Add("TagsToRemove", tagsToRemove);
            argumentsOfScenario.Add("TagsToAdd", tagsToAdd);
            argumentsOfScenario.Add("ServiceType", serviceType);
            argumentsOfScenario.Add("LocationType", locationType);
            argumentsOfScenario.Add("StartDate", startDate);
            argumentsOfScenario.Add("EndDate", endDate);
            argumentsOfScenario.Add("AvailableDays", availableDays);
            argumentsOfScenario.Add("SkillTrade", skillTrade);
            argumentsOfScenario.Add("Credit", credit);
            argumentsOfScenario.Add("SkillExchangeTagsToRemove", skillExchangeTagsToRemove);
            argumentsOfScenario.Add("skillExchangeTagsToAdd", skillExchangeTagsToAdd);
            argumentsOfScenario.Add("Active", active);
            argumentsOfScenario.Add("Message", message);
            argumentsOfScenario.Add("FieldErrorMessage", fieldErrorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a Service Listing record with invalid start and end date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
  testRunner.Given("I logged in successfully and navigate to the Manage Listings page to edit the sta" +
                        "rt and end date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
  testRunner.When(string.Format("I click on the Edit button and enter \'{0}\', \'{1}\', \'{2}\',\'{3}\', \'{4}\', \'{5}\',\'{6}" +
                            "\', \'{7}\', \'{8}\', \'{9}\',\'{10}\', \'{11}\', \'{12}\', \'{13}\', \'{14}\', \'{15}\' to see if " +
                            "it doesn\'t save with an invalid start and end date", title, description, category, subCategory, tagsToRemove, tagsToAdd, serviceType, locationType, startDate, endDate, availableDays, skillTrade, credit, skillExchangeTagsToRemove, skillExchangeTagsToAdd, active), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
  testRunner.Then(string.Format("The new Service Listing record should not be updated and I should see the \"{0}\" a" +
                            "nd \"{1}\" for start and end date", message, fieldErrorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
